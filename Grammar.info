-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------


terminal '$' is unused
terminal '!#' is unused
terminal '#' is unused
terminal ':' is unused
terminal '&&' is unused
terminal '||' is unused
terminal '!' is unused
terminal '*' is unused
terminal '/' is unused
terminal '/=' is unused
terminal '*=' is unused
terminal '-=' is unused
terminal '+=' is unused
terminal '-' is unused
terminal '+' is unused
terminal '=' is unused
terminal '>' is unused
terminal '<' is unused
terminal '++' is unused
terminal length is unused
terminal empty is unused
terminal notEmpty is unused
terminal varSize is unused
terminal list is unused
terminal take is unused
terminal if is unused
terminal else is unused
terminal true is unused
terminal false is unused
terminal continue is unused
terminal string is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Exp2                               (0)
	Exp2 -> Exp ';' Exp2                               (1)
	Exp2 -> Exp ';'                                    (2)
	Exp -> end                                         (3)
	Exp -> while '(' int ')' '{' Exp2 '}'              (4)
	Exp -> vars '[' int ']' '.' print '(' ')'          (5)
	Exp -> streams '[' int ']' '.' drop '(' ')'        (6)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'$'            { TokenDollar _ }
	'!#'           { TokenEndTag _ }
	'#'            { TokenTag _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	'['            { TokenLSquare _ }
	']'            { TokenRSquare _ }
	'{'            { TokenLCurly _ }
	'}'            { TokenRCurly _ }
	'.'            { TokenDot _ }
	':'            { TokenColon _ }
	';'            { TokenSeq _ }
	'&&'           { TokenAnd _ }
	'||'           { TokenOr _ }
	'!'            { TokenNot _ }
	'*'            { TokenTimes _ }
	'/'            { TokenDiv _ }
	'/='           { TokenDivEq _ }
	'*='           { TokenTimesEq _ }
	'-='           { TokenSubEq _ }
	'+='           { TokenPlusEq _ }
	'-'            { TokenMinus _ }
	'+'            { TokenPlus _ }
	'='            { TokenEq _ }
	'>'            { TokenGt _ }
	'<'            { TokenLt _ }
	'++'           { TokenAppend _ }
	length         { TokenLength _ }
	empty          { TokenEmpty _ }
	notEmpty       { TokenNotEmpty _ }
	print          { TokenPrint _ }
	varSize        { TokenVarSize _ }
	vars           { TokenVars _ }
	streams        { TokenStreams _ }
	while          { TokenWhile _ }
	list           { TokenList _ }
	take           { TokenTake _ }
	drop           { TokenDrop _ }
	if             { TokenIf _ }
	else           { TokenElse _ }
	true           { TokenTrue _ }
	false          { TokenFalse _ }
	continue       { TokenContinue _ }
	end            { TokenEnd _ }
	int            { TokenInt _ $$ }
	string         { TokenString _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Exp2            rules 1, 2
	Exp             rules 3, 4, 5, 6

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	vars           shift, and enter state 3
	streams        shift, and enter state 4
	while          shift, and enter state 5
	end            shift, and enter state 6

	Exp2           goto state 7
	Exp            goto state 8

State 1


	vars           shift, and enter state 3
	streams        shift, and enter state 4
	while          shift, and enter state 5
	end            shift, and enter state 6

	Exp            goto state 2

State 2

	Exp2 -> Exp . ';' Exp2                              (rule 1)

	';'            shift, and enter state 13


State 3

	Exp -> vars . '[' int ']' '.' print '(' ')'         (rule 5)

	'['            shift, and enter state 12


State 4

	Exp -> streams . '[' int ']' '.' drop '(' ')'       (rule 6)

	'['            shift, and enter state 11


State 5

	Exp -> while . '(' int ')' '{' Exp2 '}'             (rule 4)

	'('            shift, and enter state 10


State 6

	Exp -> end .                                        (rule 3)

	';'            reduce using rule 3


State 7

	%start_parse -> Exp2 .                              (rule 0)

	%eof           accept


State 8

	Exp2 -> Exp . ';' Exp2                              (rule 1)
	Exp2 -> Exp . ';'                                   (rule 2)

	';'            shift, and enter state 9


State 9

	Exp2 -> Exp ';' . Exp2                              (rule 1)
	Exp2 -> Exp ';' .                                   (rule 2)

	'}'            reduce using rule 2
	vars           shift, and enter state 3
	streams        shift, and enter state 4
	while          shift, and enter state 5
	end            shift, and enter state 6
	%eof           reduce using rule 2

	Exp2           goto state 14
	Exp            goto state 8

State 10

	Exp -> while '(' . int ')' '{' Exp2 '}'             (rule 4)

	int            shift, and enter state 17


State 11

	Exp -> streams '[' . int ']' '.' drop '(' ')'       (rule 6)

	int            shift, and enter state 16


State 12

	Exp -> vars '[' . int ']' '.' print '(' ')'         (rule 5)

	int            shift, and enter state 15


State 13

	Exp2 -> Exp ';' . Exp2                              (rule 1)

	vars           shift, and enter state 3
	streams        shift, and enter state 4
	while          shift, and enter state 5
	end            shift, and enter state 6

	Exp2           goto state 14
	Exp            goto state 8

State 14

	Exp2 -> Exp ';' Exp2 .                              (rule 1)

	'}'            reduce using rule 1
	%eof           reduce using rule 1


State 15

	Exp -> vars '[' int . ']' '.' print '(' ')'         (rule 5)

	']'            shift, and enter state 20


State 16

	Exp -> streams '[' int . ']' '.' drop '(' ')'       (rule 6)

	']'            shift, and enter state 19


State 17

	Exp -> while '(' int . ')' '{' Exp2 '}'             (rule 4)

	')'            shift, and enter state 18


State 18

	Exp -> while '(' int ')' . '{' Exp2 '}'             (rule 4)

	'{'            shift, and enter state 23


State 19

	Exp -> streams '[' int ']' . '.' drop '(' ')'       (rule 6)

	'.'            shift, and enter state 22


State 20

	Exp -> vars '[' int ']' . '.' print '(' ')'         (rule 5)

	'.'            shift, and enter state 21


State 21

	Exp -> vars '[' int ']' '.' . print '(' ')'         (rule 5)

	print          shift, and enter state 26


State 22

	Exp -> streams '[' int ']' '.' . drop '(' ')'       (rule 6)

	drop           shift, and enter state 25


State 23

	Exp -> while '(' int ')' '{' . Exp2 '}'             (rule 4)

	vars           shift, and enter state 3
	streams        shift, and enter state 4
	while          shift, and enter state 5
	end            shift, and enter state 6

	Exp2           goto state 24
	Exp            goto state 8

State 24

	Exp -> while '(' int ')' '{' Exp2 . '}'             (rule 4)

	'}'            shift, and enter state 29


State 25

	Exp -> streams '[' int ']' '.' drop . '(' ')'       (rule 6)

	'('            shift, and enter state 28


State 26

	Exp -> vars '[' int ']' '.' print . '(' ')'         (rule 5)

	'('            shift, and enter state 27


State 27

	Exp -> vars '[' int ']' '.' print '(' . ')'         (rule 5)

	')'            shift, and enter state 31


State 28

	Exp -> streams '[' int ']' '.' drop '(' . ')'       (rule 6)

	')'            shift, and enter state 30


State 29

	Exp -> while '(' int ')' '{' Exp2 '}' .             (rule 4)

	';'            reduce using rule 4


State 30

	Exp -> streams '[' int ']' '.' drop '(' ')' .       (rule 6)

	';'            reduce using rule 6


State 31

	Exp -> vars '[' int ']' '.' print '(' ')' .         (rule 5)

	';'            reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 7
Number of terminals: 46
Number of non-terminals: 3
Number of states: 32
